import re
import sys
import os, os.path
import subprocess
import traceback
import pdb
import shutil
import SCons.Util
import platform
import atexit

Import("*")

AddOption('--CACHEDIR',
    dest='cache_dir',
    type='string',
    default=None,
    action='store',
    help='Specify the SCSons Shared Cache Directory')

cache_dir=GetOption('cache_dir')
if cache_dir == None:
  cache_dir = os.environ.get('FSTAR_SCONS_CACHE_DIR')
if cache_dir == None:
  cache_dir = os.environ.get('EVEREST_SCONS_CACHE_DIR')
if cache_dir != None:
  print('Using Shared Cache Directory %s'%cache_dir)
  CacheDir(cache_dir)

AddOption('--target',
    dest='build_target',
    type='string',
    default=None,
    action='store',
    help='Specify the build target:  ocaml-output, boot, or extract')
build_target=GetOption('build_target')

# construct a default environment
env = Environment()

# --------------------------------------------------------------------
# Configuration of some platform-specific tools

fstar_path = os.path.realpath('../bin/fstar.exe')
env['FSTAR']   = fstar_path

# propagate the OS PATH environment variable into child processes, so tools like menhir can be found
env['ENV']['PATH']=os.environ['PATH']

if build_target == 'ocaml-output':
  # build fstar.exe from OCaml sources
  fstar_exe_ocaml = SConscript('ocaml-output/SConscript', exports={'My_env' : env})
  Default(Alias('ocaml-output', fstar_exe_ocaml))
elif build_target == 'boot':
  # extract F# to F*, and F* to OCaml
  boot, extract = SConscript('SConscript', exports={'My_env' : env})
  Default(boot)
elif build_target == 'extract':
  # extract F# to F*, and F* to OCaml
  boot, extract = SConscript('SConscript', exports={'My_env' : env})
  Default(extract)
elif not GetOption('help'):
  raise SCons.Errors.UserError("Unsupported --target %s" % build_target)
