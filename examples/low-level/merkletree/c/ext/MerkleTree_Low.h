/* This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
 * KreMLin invocation: Kremlin.native -tmpdir ./ext -drop FStar,Prims,LowStar,C,C.*,C.Loops.Spec.Loops,Spec.*,Lib.*,WasmSupport -drop Hacl.Cast,Hacl.UInt8,Hacl.UInt16,Hacl.UInt32,Hacl.UInt64,Hacl.UInt128 -drop Hacl.Spec.Endianness,Hacl.Endianness,Seq.Create -drop Hacl.Impl.SHA2_256.Lemmas,Hacl.Impl.SHA2_384.Lemmas,Hacl.Impl.SHA2_512.Lemmas -drop MerkleTree.High -I ../ ../MerkleTree.Low.fst lib/connect.c lib/Hacl_SHA2_256.c merkle_tree.c
 * F* version: 8f809af7
 * KreMLin version: a6051b52
 */

#include "kremlib.h"
#ifndef __MerkleTree_Low_H
#define __MerkleTree_Low_H




extern void *MerkleTree_Low_root;

typedef uint32_t MerkleTree_Low_uint32_t;

typedef uint8_t MerkleTree_Low_uint8_t;

typedef uint8_t *MerkleTree_Low_hash;

typedef uint8_t *MerkleTree_Low_vhash;

typedef uint8_t **MerkleTree_Low_hash_buf;

extern void MerkleTree_Low_hash_from_hashes(uint8_t *x0, uint8_t *x1, uint8_t *x2);

uint32_t MerkleTree_Low_uint32_pow2(uint32_t sz);

bool MerkleTree_Low_uint32_is_pow2(uint32_t n1);

uint32_t MerkleTree_Low_uint32_pow2_floor_(uint32_t n1);

uint32_t MerkleTree_Low_uint32_pow2_floor(uint32_t n1);

uint32_t MerkleTree_Low_uint32_num_of_ones(uint32_t n1);

typedef struct MerkleTree_Low_merkle_tree_s
{
  uint32_t nelts;
  uint32_t nvalues;
  uint8_t **values;
  uint8_t **iroots;
}
MerkleTree_Low_merkle_tree;

bool MerkleTree_Low_uu___is_MT(MerkleTree_Low_merkle_tree projectee);

uint32_t MerkleTree_Low___proj__MT__item__nelts(MerkleTree_Low_merkle_tree projectee);

uint32_t MerkleTree_Low___proj__MT__item__nvalues(MerkleTree_Low_merkle_tree projectee);

uint8_t **MerkleTree_Low___proj__MT__item__values(MerkleTree_Low_merkle_tree projectee);

uint8_t **MerkleTree_Low___proj__MT__item__iroots(MerkleTree_Low_merkle_tree projectee);

typedef MerkleTree_Low_merkle_tree *MerkleTree_Low_mt_ptr;

uint8_t **MerkleTree_Low_create_hashes(uint32_t len);

void MerkleTree_Low_init_hashes(uint32_t len, uint8_t **hs);

void MerkleTree_Low_init_hashes_partial(uint32_t idx, uint32_t len, uint8_t **hs);

MerkleTree_Low_merkle_tree *MerkleTree_Low_create_merkle_tree();

uint8_t **MerkleTree_Low_insert_values(uint32_t nelts, uint32_t nvs, uint8_t **vs, uint8_t *e);

void MerkleTree_Low_copy_hash(uint8_t *src, uint8_t *dst);

void MerkleTree_Low_insert_iroots(uint32_t nelts, uint8_t **irs, uint8_t *nv);

void MerkleTree_Low_insert(MerkleTree_Low_merkle_tree *mt, uint8_t *e);

void MerkleTree_Low_merkle_root_of_iroots(uint32_t nirs, uint8_t **irs, uint8_t *acc);

void MerkleTree_Low_get_root(MerkleTree_Low_merkle_tree *mt, uint8_t *rt);

void MerkleTree_Low_free_hashes(uint32_t len, uint8_t **hs);

void MerkleTree_Low_free_merkle_tree(MerkleTree_Low_merkle_tree *mt);

#define __MerkleTree_Low_H_DEFINED
#endif
